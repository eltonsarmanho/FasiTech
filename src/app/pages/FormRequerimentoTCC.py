from __future__ import annotations

import sys
from datetime import datetime
from pathlib import Path
from typing import Any

import streamlit as st

# Adicionar diret√≥rio raiz ao PYTHONPATH
ROOT_DIR = Path(__file__).resolve().parents[3]
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

LOGO_PATH = Path(__file__).resolve().parents[2] / "resources" / "fasiOficial.png"

# Listas de professores
PROFESSORES = [
    "Allan Barbosa Costa",
    "Elton Sarmanho Siqueira",
    "Carlos dos Santos Portela",
    "Fabricio de Souza Farias",
    "Ulisses Weyl da Cunha Costa",
    "Diovanni Moraes de Araujo",
    "Leonardo Nunes Gon√ßalves",
    "Keventon Rian Gimar√£es Gon√ßalves",
]

MEMBROS_BANCA = [
    "Allan Barbosa Costa",
    "Elton Sarmanho Siqueira",
    "Carlos dos Santos Portela",
    "Fabricio de Souza Farias",
    "Ulisses Weyl da Cunha Costa",
    "Diovanni Moraes de Araujo",
    "Leonardo Nunes Gon√ßalves",
    "Keventon Rian Gimar√£es Gon√ßalves",
]

# Mapeamento de professores para emails
PROFESSORES_EMAILS = {
    "Allan Barbosa Costa": "allanbcosta@ufpa.br",
    "Elton Sarmanho Siqueira": "eltonss@ufpa.br",
    "Carlos dos Santos Portela": "carlos.portela@ufpa.br",
    "Fabricio de Souza Farias": "fabricio.farias@ufpa.br",
    "Ulisses Weyl da Cunha Costa": "ulisses.costa@ufpa.br",
    "Diovanni Moraes de Araujo": "diovanni@ufpa.br",
    "Leonardo Nunes Gon√ßalves": "leonardo.goncalves@ufpa.br",
    "Keventon Rian Gimar√£es Gon√ßalves": "keventon@ufpa.br",
}

MODALIDADES = [
    "Monografia, podendo ser elaborada em coautoria (dupla)",
    "Texto cient√≠fico na forma de artigo",
    "Publica√ß√£o de trabalho em anais de evento t√©cnico-cient√≠fico, como primeiro autor, devendo ser defendido individualmente",
    "Memorial formativo, com a apresenta√ß√£o circunstanciada e fundamentada das viv√™ncias e experi√™ncias acad√™micas do(a) discente",
    "Publica√ß√£o ou aceite de publica√ß√£o de artigo em peri√≥dico cient√≠fico, como primeiro autor, devendo ser defendido individualmente",
    "Submiss√£o de artigo em peri√≥dico cient√≠fico, como primeiro autor, devendo ser defendido individualmente",
    "Publica√ß√£o de cap√≠tulo de livro com comit√™ editorial, como primeiro autor, devendo ser defendido individualmente",
    "Relat√≥rio de participa√ß√£o em projeto de ensino com plano de atividades conclu√≠do, na condi√ß√£o de bolsista ou volunt√°rio(a)",
    "Relat√≥rio de participa√ß√£o em projeto de pesquisa com plano de inicia√ß√£o cient√≠fica conclu√≠do, na condi√ß√£o de bolsista ou volunt√°rio(a)",
    "Relat√≥rio de participa√ß√£o em projeto de extens√£o com plano de trabalho conclu√≠do, na condi√ß√£o de bolsista ou volunt√°rio(a)",
    "Relat√≥rio de experi√™ncia em est√°gio n√£o obrigat√≥rio na √°rea do curso",
    "Produ√ß√£o audiovisual",
    "Produ√ß√£o art√≠stica, cultural ou tecnol√≥gica",
    "Desenvolvimento de patentes, modelos de utilidade, cultivares ou marcas",
]


def _load_requerimento_settings() -> dict[str, Any]:
    """Carrega configura√ß√µes do Requerimento TCC do secrets.toml."""
    try:
        return {
            "sheet_id": st.secrets["requerimento_tcc"]["sheet_id"],
            "notification_recipients": st.secrets["requerimento_tcc"].get("notification_recipients", []),
        }
    except (KeyError, FileNotFoundError) as e:
        st.error(
            f"‚ö†Ô∏è Configura√ß√µes Requerimento TCC n√£o encontradas em secrets.toml.\n\n"
            f"Por favor, configure a se√ß√£o [requerimento_tcc] com:\n"
            f"- sheet_id\n"
            f"- notification_recipients"
        )
        raise ValueError("Configura√ß√µes Requerimento TCC ausentes") from e


def _render_intro() -> None:
    st.markdown(
        """
        <style>
            /* Estilos alinhados com identidade visual institucional */
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            
            /* Ocultar sidebar completamente */
            [data-testid="stSidebar"] {
                display: none;
            }
            [data-testid="collapsedControl"] {
                display: none;
            }
            section[data-testid="stSidebar"] {
                display: none !important;
            }
            
            .req-hero {
                background: linear-gradient(135deg, #1a0d2e 0%, #2d1650 50%, #4a1d7a 100%);
                border-radius: 16px;
                padding: 36px;
                color: #ffffff;
                margin-bottom: 32px;
                box-shadow: 0 10px 30px rgba(26, 13, 46, 0.25);
                position: relative;
                overflow: hidden;
            }
            
            .req-hero::before {
                content: '';
                position: absolute;
                top: -30%;
                right: -5%;
                width: 300px;
                height: 300px;
                background: radial-gradient(circle, rgba(255,255,255,0.08) 0%, transparent 70%);
                border-radius: 50%;
            }
            
            .req-hero h1 {
                font-size: 1.9rem;
                margin-bottom: 16px;
                font-weight: 700;
                text-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }
            
            .req-card {
                background: #ffffff;
                border-radius: 16px;
                padding: 36px;
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
                border: 1px solid #e2e8f0;
                margin-bottom: 24px;
            }
            
            .req-instructions {
                font-size: 0.95rem;
                line-height: 1.7;
                margin-top: 12px;
                padding-left: 20px;
            }
            
            .req-instructions li {
                margin-bottom: 12px;
            }
            
            .req-instructions strong {
                color: #fbbf24;
                font-weight: 600;
            }
            
            .req-required {
                color: #ef4444;
                font-weight: 700;
            }
            
            .info-box {
                background: #dbeafe;
                border-left: 4px solid #3b82f6;
                padding: 16px;
                margin: 20px 0;
                border-radius: 8px;
            }
            
            .info-box h3 {
                color: #1e40af;
                margin-bottom: 8px;
                font-size: 1.1rem;
            }
            
            .info-box p {
                color: #1e3a8a;
                margin: 8px 0;
            }
            
            .stButton > button {
                width: 100%;
                background: linear-gradient(135deg, #4a1d7a 0%, #7c3aed 100%);
                color: #ffffff;
                border: none;
                font-weight: 600;
                padding: 16px 32px;
                border-radius: 12px;
                transition: all 0.3s ease;
                font-size: 1rem;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                box-shadow: 0 4px 12px rgba(74, 29, 122, 0.25);
            }
            
            .stButton > button:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 24px rgba(74, 29, 122, 0.4);
                background: linear-gradient(135deg, #5a2d8a 0%, #8c4afd 100%);
            }
            
            .logo-container {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 16px;
                background: #ffffff;
                border-radius: 12px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
                margin-bottom: 16px;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )

    # Logo
    col_left, col_center, col_right = st.columns([1, 2, 1])
    with col_center:
        if LOGO_PATH.exists():
            st.markdown('<div class="logo-container">', unsafe_allow_html=True)
            st.image(str(LOGO_PATH), use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
    
    # Hero section
    st.markdown(
        """
        <div class="req-hero">
            <h1>üìù Requerimento de TCC</h1>
            <p style="font-size: 1rem; margin-bottom: 16px;">Registro de informa√ß√µes para defesa do Trabalho de Conclus√£o de Curso</p>
            <ol class="req-instructions">
                <li>
                    <strong>Preencha todos os campos obrigat√≥rios</strong> com aten√ß√£o.
                </li>
                <li>
                    Para TCCs em <strong>dupla</strong>, ambos os alunos devem registrar as mesmas informa√ß√µes (t√≠tulo, resumo e palavras-chave).
                </li>
                <li>
                    Escolha uma data que esteja dentro do <strong>calend√°rio da Jornada do TCC</strong>.
                </li>
            </ol>
        </div>
        """,
        unsafe_allow_html=True,
    )


def _validate_submission(
    nome: str,
    matricula: str,
    email: str,
    titulo: str,
    resumo: str,
    palavras_chave: str,
    data_defesa: Any,
    modalidade: str,
    orientador: str,
    membro1: str,
    membro1_outro: str,
    membro2: str,
    membro2_outro: str,
) -> list[str]:
    """Executa valida√ß√µes b√°sicas antes de enviar ao backend."""
    errors: list[str] = []
    
    # Nome obrigat√≥rio
    if not nome.strip():
        errors.append("Nome completo √© obrigat√≥rio.")
    
    # Matr√≠cula obrigat√≥ria
    if not matricula.strip():
        errors.append("Matr√≠cula √© obrigat√≥ria.")
    
    # Email obrigat√≥rio e v√°lido
    if not email.strip():
        errors.append("E-mail √© obrigat√≥rio.")
    elif "@" not in email or "." not in email.split("@")[-1]:
        errors.append("E-mail inv√°lido. Use um formato v√°lido (exemplo@dominio.com).")
    
    # T√≠tulo obrigat√≥rio
    if not titulo.strip():
        errors.append("T√≠tulo do trabalho √© obrigat√≥rio.")
    
    # Resumo obrigat√≥rio
    if not resumo.strip():
        errors.append("Resumo √© obrigat√≥rio.")
    
    # Palavras-chave obrigat√≥rias
    if not palavras_chave.strip():
        errors.append("Palavras-chave s√£o obrigat√≥rias.")
    
    # Data obrigat√≥ria
    if not data_defesa:
        errors.append("Data de defesa √© obrigat√≥ria.")
    
    # Modalidade obrigat√≥ria
    if not modalidade:
        errors.append("Modalidade do trabalho √© obrigat√≥ria.")
    
    # Orientador obrigat√≥rio (sem op√ß√£o "Outro:")
    if not orientador or orientador == "":
        errors.append("Orientador √© obrigat√≥rio.")
    
    # Membro 1 obrigat√≥rio
    if membro1 == "Outro:" and not membro1_outro.strip():
        errors.append("Especifique o nome do Membro 1 da Banca.")
    elif not membro1:
        errors.append("Membro 1 da Banca √© obrigat√≥rio.")
    
    # Membro 2 obrigat√≥rio
    if membro2 == "Outro:" and not membro2_outro.strip():
        errors.append("Especifique o nome do Membro 2 da Banca.")
    elif not membro2:
        errors.append("Membro 2 da Banca √© obrigat√≥rio.")
    
    return errors


def _save_to_sheets(form_data: dict[str, Any], sheet_id: str) -> None:
    """Salva os dados do requerimento na planilha do Google Sheets."""
    from src.services.google_sheets import append_rows
    
    # Obter ano atual para determinar a aba
    ano_atual = str(datetime.now().year)
    
    # Preparar dados para a planilha
    row_data = {
        "Nome": form_data["nome"],
        "Matr√≠cula": form_data["matricula"],
        "Email": form_data["email"],
        "T√≠tulo do trabalho": form_data["titulo"],
        "Modalidade do Trabalho": form_data["modalidade"],
        "Orientador": form_data["orientador"],
        "Membro 1 da Banca": form_data["membro1"],
        "Membro 2 da Banca": form_data["membro2"],
        "Membro 3 da Banca (Opcional)": form_data.get("membro3", ""),
        "Resumo": form_data["resumo"],
        "Palavras-chave": form_data["palavras_chave"],
        "Data": form_data["data_defesa"],
    }
    
    # Adicionar na aba do ano atual
    append_rows([row_data], sheet_id, range_name=ano_atual)


def _send_notification_email(form_data: dict[str, Any], recipients: list[str]) -> None:
    """Envia email de notifica√ß√£o sobre o requerimento."""
    from src.services.email_service import send_email_with_attachments
    
    # Montar lista de membros da banca
    membros = [form_data['membro1'], form_data['membro2']]
    if form_data.get('membro3'):
        membros.append(form_data['membro3'])
    membros_texto = ", ".join(membros)
    
    subject = "‚úÖ Nova Resposta Registrada - Formul√°rio Requisi√ß√µes de TCC"
    body = f"""\
Ol√°,

Uma nova resposta foi registrada no formul√°rio requisi√ß√µes de TCC.

üìÖ Data da Defesa: {form_data['data_defesa']}
üéì Nome: {form_data['nome']}
üî¢ Matr√≠cula: {form_data['matricula']}
ÔøΩ Orientador: {form_data['orientador']}
ÔøΩ Membros da Banca: {membros_texto}
üìñ T√≠tulo: {form_data['titulo']}
ÔøΩ Resumo: {form_data['resumo']}
üîë Palavras-chave: {form_data['palavras_chave']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ñ Sistema de Automa√ß√£o da FASI
"""
    
    # Montar lista de destinat√°rios: aluno + orientador + faculdade (notification_recipients)
    all_recipients = recipients.copy()  # notification_recipients da faculdade
    
    # Adicionar email do aluno
    if form_data['email'] not in all_recipients:
        all_recipients.append(form_data['email'])
    
    # Adicionar email do orientador
    orientador_email = PROFESSORES_EMAILS.get(form_data['orientador'])
    if orientador_email and orientador_email not in all_recipients:
        all_recipients.append(orientador_email)
    
    send_email_with_attachments(subject, body, all_recipients)


def render_form() -> None:
    _render_intro()
    
    # Aviso importante no topo
    st.info("‚ÑπÔ∏è **Importante:** Todos os campos s√£o obrigat√≥rios (exceto Membro 3 da Banca)")
    st.markdown("<br>", unsafe_allow_html=True)
    
   
    
    # ============================================
    # SE√á√ÉO FORA DO FORM: Banca Examinadora (com campos condicionais "Outro:")
    # ============================================
    st.markdown("### üë• Banca Examinadora")
    st.markdown("<span class='req-required'>*</span> Selecione os membros da banca antes de preencher o restante do formul√°rio", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Orientador (sem op√ß√£o "Outro:")
    orientador = st.selectbox(
        "Orientador *",
        options=[""] + PROFESSORES,
        format_func=lambda x: "Selecione o orientador..." if x == "" else x,
        key="orientador_select"
    )
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Membro 1 com campo condicional
    membro1 = st.selectbox(
        "Membro 1 da Banca *",
        options=[""] + MEMBROS_BANCA + ["Outro:"],
        format_func=lambda x: "Selecione o membro 1..." if x == "" else x,
        key="membro1_select"
    )
    
    membro1_outro = ""
    if membro1 == "Outro:":
        membro1_outro = st.text_input(
            "Especifique o nome do Membro 1 *", 
            placeholder="Nome completo do membro 1",
            key="membro1_outro_input"
        )
    
    # Membro 2 com campo condicional
    membro2 = st.selectbox(
        "Membro 2 da Banca *",
        options=[""] + MEMBROS_BANCA + ["Outro:"],
        format_func=lambda x: "Selecione o membro 2..." if x == "" else x,
        key="membro2_select"
    )
    
    membro2_outro = ""
    if membro2 == "Outro:":
        membro2_outro = st.text_input(
            "Especifique o nome do Membro 2 *", 
            placeholder="Nome completo do membro 2",
            key="membro2_outro_input"
        )
    
    # Membro 3 (Opcional) com campo condicional
    membro3 = st.selectbox(
        "Membro 3 da Banca (Opcional)",
        options=["Nenhum"] + MEMBROS_BANCA + ["Outro:"],
        key="membro3_select"
    )
    
    membro3_outro = ""
    if membro3 == "Outro:":
        membro3_outro = st.text_input(
            "Especifique o nome do Membro 3", 
            placeholder="Nome completo do membro 3",
            key="membro3_outro_input"
        )
    
    st.markdown("<br><hr><br>", unsafe_allow_html=True)
    
    # ============================================
    # FORMUL√ÅRIO PRINCIPAL
    # ============================================
    with st.form("formulario_requerimento_tcc"):
        # Dados Pessoais
        st.markdown("### üë§ Dados Pessoais")
        col1, col2 = st.columns(2)
        
        nome = col1.text_input("Nome Completo *", placeholder="Seu nome completo")
        matricula = col2.text_input("Matr√≠cula *", placeholder="202312345")
        email = st.text_input("E-mail *", placeholder="seuemail@ufpa.br")
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Informa√ß√µes do Trabalho
        st.markdown("### üìö Informa√ß√µes do Trabalho")
        
        titulo = st.text_input(
            "T√≠tulo do trabalho *",
            placeholder="Digite o t√≠tulo completo do trabalho",
            help="‚ö†Ô∏è Caso o TCC for em DUPLA, registre o mesmo t√≠tulo no processo de requerimento"
        )
        
        resumo = st.text_area(
            "Resumo *",
            placeholder="Digite o resumo do trabalho",
            height=150,
            help="‚ö†Ô∏è Caso o TCC for em DUPLA, registre o mesmo resumo no processo de requerimento"
        )
        
        palavras_chave = st.text_input(
            "Palavras-chave *",
            placeholder="Palavra1, Palavra2, Palavra3",
            help="‚ö†Ô∏è Caso o TCC for em DUPLA, registre as mesmas palavras-chaves no processo de requerimento"
        )
        
        data_defesa = st.date_input(
            "Data da Defesa *",
            help="üí° Sugest√£o de data dentro do calend√°rio da jornada do TCC",
            format="DD/MM/YYYY"
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Modalidade do Trabalho
        st.markdown("### üìã Modalidade do Trabalho")
        modalidade = st.selectbox(
            "Selecione a modalidade *",
            options=[""] + MODALIDADES,
            format_func=lambda x: "Selecione uma op√ß√£o..." if x == "" else x
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Bot√£o de envio
        submitted = st.form_submit_button("Enviar Requerimento")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Processar submiss√£o
    if submitted:
        errors = _validate_submission(
            nome, matricula, email, titulo, resumo, palavras_chave,
            data_defesa, modalidade, orientador,
            membro1, membro1_outro, membro2, membro2_outro
        )
        
        if errors:
            st.error("**Erros encontrados:**\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors))
        else:
            with st.spinner("Processando requerimento de TCC..."):
                try:
                    # Carregar configura√ß√µes
                    settings = _load_requerimento_settings()
                    
                    # Preparar dados (orientador n√£o tem op√ß√£o "Outro:")
                    orientador_final = orientador
                    membro1_final = membro1_outro if membro1 == "Outro:" else membro1
                    membro2_final = membro2_outro if membro2 == "Outro:" else membro2
                    membro3_final = ""
                    if membro3 != "Nenhum":
                        membro3_final = membro3_outro if membro3 == "Outro:" else membro3
                    
                    form_data = {
                        "nome": nome,
                        "matricula": matricula,
                        "email": email,
                        "titulo": titulo,
                        "resumo": resumo,
                        "palavras_chave": palavras_chave,
                        "data_defesa": data_defesa.strftime("%d/%m/%Y"),
                        "modalidade": modalidade,
                        "orientador": orientador_final,
                        "membro1": membro1_final,
                        "membro2": membro2_final,
                        "membro3": membro3_final,
                    }
                    
                    # Salvar na planilha
                    _save_to_sheets(form_data, settings["sheet_id"])
                    
                    # Enviar email
                    _send_notification_email(form_data, settings["notification_recipients"])
                    
                    st.success(
                        f"‚úÖ **Requerimento de TCC enviado com sucesso!**\n\n"
                        f"**Resumo:**\n"
                        f"- Nome: {nome}\n"
                        f"- Matr√≠cula: {matricula}\n"
                        f"- T√≠tulo: {titulo}\n"
                        f"- Data da Defesa: {data_defesa.strftime('%d/%m/%Y')}\n"
                        f"- Orientador: {orientador_final}\n\n"
                        f"Voc√™ receber√° um e-mail de confirma√ß√£o em breve."
                    )
                    st.balloons()
                    
                except Exception as e:
                    st.error(f"‚ùå **Erro ao processar requerimento:**\n\n{str(e)}")
                    st.info("Por favor, tente novamente ou entre em contato com o suporte.")


def main() -> None:
    st.set_page_config(
        page_title="Requerimento TCC - FasiTech",
        layout="centered",
        page_icon="üìù",
        initial_sidebar_state="collapsed",
        menu_items={
            'Get Help': None,
            'Report a bug': None,
            'About': None
        }
    )
    render_form()


main()
