from __future__ import annotations

import re
import sys
import time
from pathlib import Path
from typing import Any

import streamlit as st

# Adicionar diret√≥rio raiz ao PYTHONPATH
ROOT_DIR = Path(__file__).resolve().parents[3]
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

LOGO_PATH = Path(__file__).resolve().parents[2] / "resources" / "fasiOficial.png"
MAX_FILE_SIZE_MB = 10


def _load_estagio_settings() -> dict[str, Any]:
    """Carrega configura√ß√µes de Est√°gio do secrets.toml."""
    try:
        return {
            "drive_folder_id": st.secrets["estagio"]["drive_folder_id"],
            "sheet_id": st.secrets["estagio"]["sheet_id"],
            "notification_recipients": st.secrets["estagio"].get("notification_recipients", []),
        }
    except (KeyError, FileNotFoundError) as e:
        st.error(
            f"‚ö†Ô∏è Configura√ß√µes de Est√°gio n√£o encontradas em secrets.toml.\n\n"
            f"Por favor, configure a se√ß√£o [estagio] com:\n"
            f"- drive_folder_id\n"
            f"- sheet_id\n"
            f"- notification_recipients"
        )
        raise ValueError("Configura√ß√µes de Est√°gio ausentes") from e


def _render_intro() -> None:
    st.markdown(
        """
        <style>
            /* Estilos alinhados com identidade visual institucional */
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            
            /* Ocultar sidebar completamente */
            [data-testid="stSidebar"] {
                display: none;
            }
            [data-testid="collapsedControl"] {
                display: none;
            }
            section[data-testid="stSidebar"] {
                display: none !important;
            }
            
            .estagio-hero {
                background: linear-gradient(135deg, #1a0d2e 0%, #2d1650 50%, #4a1d7a 100%);
                border-radius: 16px;
                padding: 36px;
                color: #ffffff;
                margin-bottom: 32px;
                box-shadow: 0 10px 30px rgba(26, 13, 46, 0.25);
                position: relative;
                overflow: hidden;
            }
            
            .estagio-hero::before {
                content: '';
                position: absolute;
                top: -30%;
                right: -5%;
                width: 300px;
                height: 300px;
                background: radial-gradient(circle, rgba(255,255,255,0.08) 0%, transparent 70%);
                border-radius: 50%;
            }
            
            .estagio-hero h1 {
                font-size: 1.9rem;
                margin-bottom: 16px;
                font-weight: 700;
                text-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }
            
            .estagio-hero p {
                font-size: 1.05rem;
                line-height: 1.6;
                margin-bottom: 8px;
                opacity: 0.95;
            }
            
            .estagio-card {
                background: #ffffff;
                border-radius: 16px;
                padding: 36px;
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
                border: 1px solid #e2e8f0;
                margin-bottom: 24px;
            }
            
            .estagio-required {
                color: #ef4444;
                font-weight: 700;
            }
            
            .info-box {
                background: #dbeafe;
                border-left: 4px solid #3b82f6;
                padding: 16px;
                margin: 20px 0;
                border-radius: 8px;
            }
            
            .info-box p {
                color: #1e40af;
                margin: 4px 0;
                font-size: 0.95rem;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )
    
    # Logo
    if LOGO_PATH.exists():
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.image(str(LOGO_PATH), use_container_width=True)
    
    # Hero Section
    st.markdown(
        """
        <div class="estagio-hero">
            <h1>üìã Formul√°rio de Envio de Documentos de Est√°gio</h1>
            <p><strong>Referente √†s disciplinas de Est√°gio I e Est√°gio II</strong></p>
            <p>Preencha os campos abaixo e envie os documentos obrigat√≥rios referentes ao seu est√°gio.</p>
        </div>
        """,
        unsafe_allow_html=True,
    )
    
    # Info Box
    st.markdown(
        """
        <div class="info-box">
            <p><strong>‚ÑπÔ∏è Informa√ß√µes sobre Componente Curricular:</strong></p>
            <p>‚Ä¢ <strong>Plano de Est√°gio</strong> ‚Üí Refere-se ao <strong>Est√°gio I</strong></p>
            <p>‚Ä¢ <strong>Relat√≥rio Final</strong> ‚Üí Refere-se ao <strong>Est√°gio II</strong></p>
        </div>
        """,
        unsafe_allow_html=True,
    )


def _validate_email(email: str) -> bool:
    """Valida formato de email."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def _validate_turma(turma: str) -> bool:
    """Valida se a turma tem exatamente 4 d√≠gitos num√©ricos."""
    return bool(re.match(r'^\d{4}$', turma))


def _validate_submission(
    nome: str,
    email: str,
    turma: str,
    matricula: str,
    orientador: str,
    titulo: str,
    componente: str,
    uploaded_files: list,
) -> list[str]:
    """Executa valida√ß√µes b√°sicas antes de enviar ao backend."""
    errors: list[str] = []
    
    # Nome obrigat√≥rio
    if not nome.strip():
        errors.append("Nome completo √© obrigat√≥rio.")
    
    # Email obrigat√≥rio e v√°lido
    if not email.strip():
        errors.append("E-mail √© obrigat√≥rio.")
    elif not _validate_email(email):
        errors.append("E-mail inv√°lido. Use um formato v√°lido (exemplo@dominio.com).")
    
    # Turma obrigat√≥ria e formato v√°lido
    if not turma.strip():
        errors.append("Turma √© obrigat√≥ria.")
    elif not _validate_turma(turma):
        errors.append("Turma deve ter exatamente 4 d√≠gitos num√©ricos (ex: 2027).")
    
    # Matr√≠cula obrigat√≥ria
    if not matricula.strip():
        errors.append("Matr√≠cula √© obrigat√≥ria.")
    
    # Orientador obrigat√≥rio
    if not orientador.strip():
        errors.append("Orientador ou Supervisor √© obrigat√≥rio.")
    
    # T√≠tulo obrigat√≥rio
    if not titulo.strip():
        errors.append("T√≠tulo √© obrigat√≥rio.")
    
    # Componente obrigat√≥rio
    if not componente:
        errors.append("Componente Curricular √© obrigat√≥rio.")
    
    # Arquivos obrigat√≥rios
    if not uploaded_files:
        errors.append("Voc√™ deve enviar pelo menos um arquivo.")
    
    # Validar tamanho dos arquivos
    for file in uploaded_files:
        file_size_mb = file.size / (1024 * 1024)
        if file_size_mb > MAX_FILE_SIZE_MB:
            errors.append(
                f"Arquivo '{file.name}' excede o tamanho m√°ximo de {MAX_FILE_SIZE_MB} MB "
                f"(tamanho atual: {file_size_mb:.2f} MB)."
            )
    
    return errors


def _process_estagio_submission(form_data: dict[str, Any], files: list) -> None:
    """Processa submiss√£o do formul√°rio de est√°gio."""
    from src.services import form_service
    
    # Processar submiss√£o usando servi√ßo centralizado
    form_service.process_estagio_submission(form_data, files)


def render_form() -> None:
    _render_intro()
    
    
    with st.form("formulario_estagio"):
        st.markdown("<span class='estagio-required'>*</span> Todos os campos s√£o obrigat√≥rios", unsafe_allow_html=True)
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Dados Pessoais
        st.markdown("### üë§ Dados Pessoais")
        col1, col2 = st.columns(2)
        
        nome = col1.text_input(
            "Nome Completo *",
            placeholder="Seu nome completo",
            help="Digite seu nome completo como consta no SIGAA"
        )
        
        email = col2.text_input(
            "E-mail *",
            placeholder="seuemail@ufpa.br",
            help="Digite um e-mail v√°lido para receber confirma√ß√£o"
        )
        
        col3, col4 = st.columns(2)
        
        turma = col3.text_input(
            "Turma *",
            placeholder="2027",
            max_chars=4,
            help="Ano de ingresso (4 d√≠gitos num√©ricos, ex: 2027)"
        )
        
        matricula = col4.text_input(
            "Matr√≠cula *",
            placeholder="202312345",
            help="Sua matr√≠cula no SIGAA"
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Informa√ß√µes do Est√°gio
        st.markdown("### üìö Informa√ß√µes do Est√°gio")
        
        orientador = st.text_input(
            "Orientador ou Supervisor *",
            placeholder="Nome completo do orientador ou supervisor",
            help="Nome do professor orientador ou supervisor de est√°gio"
        )
        
        titulo = st.text_input(
            "T√≠tulo *",
            placeholder="T√≠tulo do Plano ou Relat√≥rio de Est√°gio",
            help="Digite o t√≠tulo do documento de est√°gio"
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Componente Curricular
        st.markdown("### üìã Componente Curricular")
        
        componente = st.radio(
            "Selecione o Componente Curricular *",
            options=["Plano de Est√°gio (Est√°gio I)", "Relat√≥rio Final (Est√°gio II)"],
            help="Plano de Est√°gio = Est√°gio I | Relat√≥rio Final = Est√°gio II"
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Anexos
        st.markdown("### üìé Anexos")
        st.markdown(
            f"<p style='color: #6b7280; font-size: 0.9rem;'>"
            f"Tamanho m√°ximo por arquivo: <strong>{MAX_FILE_SIZE_MB} MB</strong> | "
            f"Formato: <strong>PDF</strong></p>",
            unsafe_allow_html=True,
        )
        
        uploaded_files = st.file_uploader(
            "Envie os documentos de est√°gio *",
            type=["pdf"],
            accept_multiple_files=True,
            help=f"Selecione um ou mais arquivos PDF (m√°ximo {MAX_FILE_SIZE_MB} MB cada)"
        )
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Bot√£o de envio
        submitted = st.form_submit_button("Enviar Documentos", use_container_width=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Processar submiss√£o
    if submitted:
        errors = _validate_submission(
            nome, email, turma, matricula, orientador, titulo, componente, uploaded_files or []
        )
        
        if errors:
            st.error("**‚ùå Erros encontrados:**\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors))
        else:
            with st.spinner("Processando envio de documentos de est√°gio..."):
                try:
                    # Preparar dados do formul√°rio
                    form_data = {
                        "nome": nome.strip(),
                        "email": email.strip().lower(),
                        "turma": turma.strip(),
                        "matricula": matricula.strip(),
                        "orientador": orientador.strip(),
                        "titulo": titulo.strip(),
                        "componente": componente,
                    }
                    
                    # Processar submiss√£o
                    _process_estagio_submission(form_data, uploaded_files)
                    
                    st.success(
                        f"‚úÖ **Documentos de est√°gio enviados com sucesso!**\n\n"
                        f"**Resumo:**\n"
                        f"- Nome: {nome}\n"
                        f"- Matr√≠cula: {matricula}\n"
                        f"- Turma: {turma}\n"
                        f"- Componente: {componente}\n"
                        f"- Arquivo(s): {len(uploaded_files)} documento(s)\n\n"
                        f"Voc√™ receber√° um e-mail de confirma√ß√£o em breve.\n\n"
                        f"Redirecionando para a tela principal em 4 segundos..."
                    )
                    st.balloons()
                    
                    # Aguardar 4 segundos e redirecionar
                    time.sleep(4)
                    st.switch_page("main.py")
                    
                except Exception as e:
                    st.error(f"‚ùå **Erro ao processar envio:**\n\n{str(e)}")
                    st.info("Por favor, tente novamente ou entre em contato com o suporte.")


def main() -> None:
    st.set_page_config(
        page_title="Formul√°rio Est√°gio - FasiTech",
        layout="centered",
        page_icon="üìã",
        initial_sidebar_state="collapsed",
        menu_items={
            'Get Help': None,
            'Report a bug': None,
            'About': None
        }
    )
    render_form()


main()
