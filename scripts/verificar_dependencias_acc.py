#!/usr/bin/env python3
"""
Script para verificar depend√™ncias do processador ACC no servidor.
Execute este script no servidor para diagnosticar problemas.
"""

import sys
import os
from pathlib import Path

print("üîç VERIFICADOR DE DEPEND√äNCIAS ACC")
print("="*50)

def verificar_python():
    """Verifica vers√£o do Python"""
    print(f"üêç Python: {sys.version}")
    print(f"   Execut√°vel: {sys.executable}")
    return True

def verificar_env_vars():
    """Verifica vari√°veis de ambiente"""
    print("\nüîß Vari√°veis de Ambiente:")
    
    # GOOGLE_API_KEY
    api_key = os.getenv("GOOGLE_API_KEY")
    if api_key:
        print(f"   ‚úÖ GOOGLE_API_KEY: {api_key[:10]}...{api_key[-5:]}")
    else:
        print("   ‚ùå GOOGLE_API_KEY: N√ÉO CONFIGURADA")
        return False
    
    # PYTHONPATH
    python_path = os.getenv("PYTHONPATH", "")
    print(f"   üìÇ PYTHONPATH: {python_path or 'N√ÉO DEFINIDO'}")
    
    return True

def verificar_dependencias():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    print("\nüì¶ Depend√™ncias Python:")
    
    dependencias = [
        ("os", "M√≥dulo padr√£o"),
        ("pathlib", "M√≥dulo padr√£o"),
        ("typing", "M√≥dulo padr√£o"),
        ("tempfile", "M√≥dulo padr√£o"),
        ("dotenv", "python-dotenv"),
        ("pdf2image", "pdf2image"),
        ("PIL", "Pillow"),
        ("agno", "agno"),
        ("agno.agent", "agno - Agent"),
        ("agno.models.google", "agno - Gemini"),
        ("agno.media", "agno - Image")
    ]
    
    todos_ok = True
    
    for modulo, descricao in dependencias:
        try:
            __import__(modulo)
            print(f"   ‚úÖ {modulo} ({descricao})")
        except ImportError as e:
            print(f"   ‚ùå {modulo} ({descricao}) - ERRO: {e}")
            todos_ok = False
    
    return todos_ok

def verificar_sistema():
    """Verifica recursos do sistema"""
    print("\nüíª Sistema:")
    
    # Diret√≥rio tempor√°rio
    import tempfile
    temp_dir = tempfile.gettempdir()
    print(f"   üìÅ Temp dir: {temp_dir}")
    
    # Verificar se pode criar arquivos no temp
    try:
        test_file = os.path.join(temp_dir, "test_acc.tmp")
        with open(test_file, 'w') as f:
            f.write("teste")
        os.remove(test_file)
        print("   ‚úÖ Escrita em temp: OK")
    except Exception as e:
        print(f"   ‚ùå Escrita em temp: ERRO - {e}")
        return False
    
    # Verificar configura√ß√£o de upload do Streamlit
    try:
        config_path = ".streamlit/config.toml"
        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                config_content = f.read()
                if "maxUploadSize" in config_content:
                    import re
                    match = re.search(r'maxUploadSize\s*=\s*(\d+)', config_content)
                    if match:
                        size = int(match.group(1))
                        print(f"   üì§ Limite upload Streamlit: {size}MB")
                    else:
                        print("   üì§ maxUploadSize encontrado mas valor n√£o identificado")
                else:
                    print("   ‚ö†Ô∏è maxUploadSize n√£o configurado no Streamlit")
        else:
            print("   ‚ö†Ô∏è Arquivo config.toml n√£o encontrado")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro ao verificar config Streamlit: {e}")
    
    # Verificar mem√≥ria dispon√≠vel (se psutil estiver dispon√≠vel)
    try:
        import psutil
        mem = psutil.virtual_memory()
        print(f"   üíæ Mem√≥ria: {mem.available / 1024**3:.1f}GB dispon√≠vel de {mem.total / 1024**3:.1f}GB")
    except ImportError:
        print("   üíæ Mem√≥ria: psutil n√£o dispon√≠vel")
    
    return True

def testar_gemini():
    """Testa conex√£o com Gemini"""
    print("\nü§ñ Teste Gemini:")
    
    try:
        from agno.models.google import Gemini
        modelo = Gemini(id="gemini-2.5-flash")
        print("   ‚úÖ Modelo Gemini criado com sucesso")
        return True
    except Exception as e:
        print(f"   ‚ùå Erro ao criar modelo Gemini: {e}")
        return False

def testar_pdf2image():
    """Testa pdf2image e poppler"""
    print("\nüìÑ Teste PDF2Image e Poppler:")
    
    # Verificar poppler primeiro
    import shutil
    if shutil.which("pdftoppm"):
        print("   ‚úÖ poppler-utils encontrado")
    else:
        print("   ‚ùå poppler-utils N√ÉO ENCONTRADO")
        print("       Instale com: sudo apt-get install poppler-utils")
        return False
    
    try:
        from pdf2image import convert_from_path
        print("   ‚úÖ pdf2image importado")
        
        # Tentar localizar um PDF de teste (se existir)
        pdf_test_paths = [
            "/tmp/test.pdf",
            "./test.pdf",
            "../test.pdf"
        ]
        
        pdf_encontrado = None
        for path in pdf_test_paths:
            if os.path.exists(path):
                pdf_encontrado = path
                break
        
        if pdf_encontrado:
            print(f"   üìã PDF de teste encontrado: {pdf_encontrado}")
            try:
                images = convert_from_path(pdf_encontrado, dpi=150)
                print(f"   ‚úÖ Convers√£o OK: {len(images)} p√°ginas")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro na convers√£o: {e}")
                if "poppler" in str(e).lower():
                    print("       Instale poppler: sudo apt-get install poppler-utils")
                return False
        else:
            print("   üìã Nenhum PDF de teste encontrado")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar pdf2image: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro inesperado: {e}")
        if "poppler" in str(e).lower():
            print("       Instale poppler: sudo apt-get install poppler-utils")
        return False

def main():
    """Executa todos os testes"""
    print(f"üìç Executando em: {os.getcwd()}")
    print(f"üìç Script: {__file__}")
    
    resultados = []
    
    # Executar testes
    resultados.append(("Python", verificar_python()))
    resultados.append(("Vari√°veis de Ambiente", verificar_env_vars()))
    resultados.append(("Depend√™ncias", verificar_dependencias()))
    resultados.append(("Sistema", verificar_sistema()))
    resultados.append(("Gemini", testar_gemini()))
    resultados.append(("PDF2Image", testar_pdf2image()))
    
    # Resumo final
    print("\n" + "="*50)
    print("üìä RESUMO FINAL:")
    print("="*50)
    
    todos_ok = True
    for nome, resultado in resultados:
        status = "‚úÖ OK" if resultado else "‚ùå FALHA"
        print(f"   {status} {nome}")
        if not resultado:
            todos_ok = False
    
    print("\n" + "="*50)
    if todos_ok:
        print("üéâ TUDO OK! O processador ACC deve funcionar.")
    else:
        print("‚ö†Ô∏è  PROBLEMAS ENCONTRADOS! Corrija os itens marcados com ‚ùå")
        print("\nSugest√µes:")
        print("- Instale depend√™ncias: pip install python-dotenv pdf2image pillow agno")
        print("- Configure GOOGLE_API_KEY no arquivo .env")
        print("- Verifique permiss√µes de escrita em /tmp")
    print("="*50)

if __name__ == "__main__":
    main()